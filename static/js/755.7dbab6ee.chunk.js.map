{"version":3,"file":"static/js/755.7dbab6ee.chunk.js","mappings":"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","sources":["components/ContactList/ContactList.styled.jsx","redux/contacts/selectors.jsx","components/ContactList/ContactList.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.js"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const ContactListEl = styled.ul`\n  width: 1200px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  list-style: none;\n  flex-wrap: wrap;\n   gap: 10px;\n  padding: 0;\n`;\n\nexport const ContactListItem = styled.li`\n  display: flex;\n  gap: 10px;\n  // flex-direction: column;\n  justify-content: space-between;\n  // align-items: center;\n  width: 420px;\n  // height: 90px;\n  border: 1px solid #39bb96;\n  padding: 12px;\n  text-align: center;\n  border-radius: 5px;\n\n  // background-color: #ccf9ef;\n   background-color: #64b5f6\n   ;\n`;\n\nexport const ContactItemHeader = styled.h2`\n  // margin: 0;\n  margin-bottom: auto;\n`;\n\nexport const ContactItemText = styled.p`\n  // margin: 0;\n  // font-weight: 600;\n  // color: #0b5e18;\n  color: white;\n  font-size: 20px;\n  // margin-bottom:8px\n`;\n\nexport const ContactItemButton = styled.button`\n  width: 100px;\n  background-color: #39bb96;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 600;\n  cursor: pointer;\n  margin-top: auto;\n  padding: 5px;\n`;\n","export const selectLoading = state => state.contacts.isLoading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n\nexport const selectError = state => state.contacts.error;","import {\n  ContactListEl,\n  ContactListItem,\n  ContactItemHeader,\n  ContactItemText,\n  } from 'components/ContactList/ContactList.styled';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Button } from '@mui/material';\nimport { deleteContact } from 'redux/contacts/operations';\nimport { selectAllContacts, selectFilter } from 'redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n\n  const getNeeddedCard = () => {\n    const normalizedFilter = filter.toLowerCase();\n\n    return items.filter(contact =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  const deleteCard = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  const neededCards = getNeeddedCard();\n\n  return (\n    <ContactListEl>\n      {neededCards.map(({ name, number, id }) => {\n        return (\n          <ContactListItem key={id}>\n            <ContactItemHeader>{name}</ContactItemHeader>\n            <ContactItemText>{number}</ContactItemText>\n            {/* <ContactItemButton\n              type=\"button\"\n              onClick={() => {\n                deleteCard(id);\n              }}\n            >\n              Delete\n            </ContactItemButton> */}\n\n            <Button variant=\"contained\" type=\"button\" onClick={() => {\n                deleteCard(id);\n              }}>Delete</Button>\n          </ContactListItem>\n        );\n      })}\n    </ContactListEl>\n  );\n};\n","import styled from '@emotion/styled';\n\nexport const FilterWrapper = styled.div`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`;\n\nexport const FilterInput = styled.input`\n  font-size: 16px;\n  width: 300px;\n  height: 30px;\n  margin-bottom: 15px;\n  padding: 5px;\n  border-radius: 5px;\n  outline-color: #0d47a1;\n  border-color: #0d47a1;\n  font-weight: 700;\n \n`;\n\nexport const FilterLabel = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #0d47a1\n  ;\n`;\n","\nimport { TextField, Typography } from '@mui/material';\nimport {\n  FilterWrapper,\n\n  } from 'components/Filter/Filter.styled';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { updateFilter } from 'redux/contacts/contactsSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const onFilterChange = e => {\n    dispatch(updateFilter(e.currentTarget.value));\n  };\n\n  return (\n    <FilterWrapper>\n      {/* <FilterLabel htmlFor=\"text\">Search contacts by name</FilterLabel> */}\n      <Typography variant=\"h6\" component=\"h3\" sx={{margin: 1}}> Search contacts by name</Typography>\n      {/* <FilterInput\n        type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange}\n        placeholder=\"Start to enter contact name\"\n      /> */}\n      <TextField type=\"text\"\n        name=\"filter\"\n        value={filter}\n        onChange={onFilterChange} label='Filter contacts'\n        placeholder=\"Start to enter contact name\"/>\n       \n    </FilterWrapper>\n  );\n};\n","import styled from '@emotion/styled';\nimport { Form, Field, ErrorMessage } from 'formik';\n\n\nexport const FormEl = styled(Form)`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 20px\n`;\n\nexport const InputEl = styled(Field)`\n  // font-size: 50px;\n  width: 300px;\n  // height: 30px;\n  // margin: 10px;\n  // padding: 50px;\n  border-radius: 5px;\n  // outline-color: #5edcb0;\n  border-color: #64b5f6;\n  font-weight: 700;\n`;\n\nexport const Label = styled.label`\n  font-size: 24px;\n  font-weight: 500;\n  margin-bottom: 5px;\n  color: #0d47a1;\n`;\n\nexport const SubmitButton = styled.button`\n  width: 150px;\n  height: 40px;\n  background-color: #39bb96;\n  border: none;\n  border-radius: 5px;\n  font-size: 16px;\n  font-weight: 700;\n  cursor: pointer;\n  outline-color: #504e4e;\n`;\n\nexport const Error = styled(ErrorMessage)`\n  width: 300px;\n  text-align: center;\n  color: red;\n  margin-bottom: 15px;\n  font-weight: 500;\n  font-size: 16px;\n`;\n\n","import { Formik } from 'formik';\nimport * as yup from 'yup';\n// import { nanoid } from 'nanoid';\nimport { TextField } from 'formik-material-ui';\nimport {\n  FormEl,\n  InputEl,\n  // Label,\n  //  Error,\n} from 'components/ContactForm/ContactForm.styled';\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport { selectAllContacts } from 'redux/contacts/selectors';\nimport {  Button } from '@mui/material';\n\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .min(4)\n    .max(10)\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n\n  const handleSubmit = (values, { resetForm }) => {\n    const duplicateContact = findDuplicateContact(values, items);\n\n    if (duplicateContact) {\n      alert(`${values.name} This contact  already exist`);\n    } else {\n      dispatch(addContact(values));\n\n      resetForm();\n    }\n  };\n\n  const findDuplicateContact = (contact, items) => {\n    return items.find(\n      item => item.name.toLowerCase() === contact.name.toLowerCase()\n    );\n  };\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={schema}\n      onSubmit={handleSubmit}\n    >\n      <FormEl autoComplete=\"off\">\n      \n        {/* <Label htmlFor=\"name\">Name</Label> */}\n        \n        <InputEl component={TextField}    type=\"text\" label='Name' name=\"name\" placeholder=\"Enter name\" /> \n               {/* <Error name=\"name\" component=\"div\" /> */}\n        {/* <Label htmlFor=\"number\">Number</Label> */}\n        <InputEl component={TextField} type=\"tel\" label=\"Number\" name=\"number\" placeholder=\"Enter phone number\" />\n                {/* <Error name=\"number\" component=\"div\" /> */}\n   \n     \n\n      <Button type=\"submit\" variant='contained'>Add contact</Button>\n      </FormEl>\n    </Formik>\n  );\n};\n\n","import styled from '@emotion/styled';\n\n\nexport const Container = styled.main`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n`;\n\nexport const LoadingMessage = styled.div`\n  font-size: 15px;\n  font-weight: 700;\n  text-align: center;\n`;","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\n\nimport { fetchContacts } from 'redux/contacts/operations';\nimport {\n  selectLoading,\n  selectError,\n  selectAllContacts,\n} from 'redux/contacts/selectors';\n\nimport { Filter } from 'components/Filter/Filter';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Container } from 'pages/Contacts/Contacts.styled';\nimport { Spinner } from 'components/Spinner/Spinner';\nimport { Typography } from '@mui/material';\n\nexport default function Contacts() {\n  const dispatch = useDispatch();\n  const items = useSelector(selectAllContacts);\n  const isLoading = useSelector(selectLoading);\n  const error = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      {/* <h1 >Phonebook</h1> */}\n      <Typography variant=\"h4\" component=\"h1\" sx={{m:2}}>Phonebook</Typography>\n      <ContactForm />\n      {items.length > 0 && (\n        <>\n          {/* <h2>Contacts</h2> */}\n          <Filter />\n        </>\n      )}\n      {isLoading && !error && <Spinner />}\n      <ContactList />\n\n      {error && <p> {error} </p>}\n    </Container>\n  );\n}"],"names":["ContactListEl","styled","ContactListItem","ContactItemHeader","ContactItemText","selectLoading","state","contacts","isLoading","selectFilter","filter","selectAllContacts","items","selectError","error","ContactList","dispatch","useDispatch","useSelector","neededCards","normalizedFilter","toLowerCase","contact","name","includes","getNeeddedCard","map","number","id","Button","variant","type","onClick","contactId","deleteContact","FilterWrapper","Filter","Typography","component","sx","margin","TextField","value","onChange","e","updateFilter","currentTarget","label","placeholder","FormEl","Form","InputEl","Field","schema","ErrorMessage","yup","shape","matches","required","min","max","initialValues","ContactForm","findDuplicateContact","find","item","validationSchema","onSubmit","values","resetForm","alert","addContact","autoComplete","Container","Contacts","useEffect","fetchContacts","m","length","Spinner"],"sourceRoot":""}